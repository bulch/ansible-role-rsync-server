---
- name: Test retrieve information from path
  ansible.builtin.stat:
    path: "{{ path_default_config_rsync }}"
  register: default_config

- name: Test assert that file rsync config is created correctly
  ansible.builtin.assert:
    that:
      - default_config.stat.exists
      - default_config.stat.mode == '0644'
      - default_config.stat.pw_name == 'root'
      - default_config.stat.gr_name == 'root'

- name: Test retrieve information from path secret_rsync config
  ansible.builtin.stat:
    path: "{{ path_secret_rsync }}"
  register: secret_rsync

- name: Test assert that file secret_rsync is created correctly
  ansible.builtin.assert:
    that:
      - secret_rsync.stat.exists
      - secret_rsync.stat.mode == '0400'
      - secret_rsync.stat.pw_name == 'root'
      - secret_rsync.stat.gr_name == 'root'

- name: Test rsync_config retrieve information from path
  ansible.builtin.stat:
    path: "{{ path_rsync_config }}"
  register: secret_rsync

- name: Test assert that file rsync_config is created correctly
  ansible.builtin.assert:
    that:
      - secret_rsync.stat.exists
      - secret_rsync.stat.mode == '0440'
      - secret_rsync.stat.pw_name == 'root'
      - secret_rsync.stat.gr_name == 'root'

# - name: Test rsync service status
#   ansible.builtin.service:
#     name: "rsync"
#   register: service_status_rsync
- name: Populate service facts
  ansible.builtin.service_facts:

- name: Print service facts
  ansible.builtin.debug:
    var: ansible_facts.services

# - name: Show names of existing systemd services
#   ansible.builtin.debug: msg={{ existing_systemd_services | map(attribute='name') }}
#   vars:
#     known_systemd_services: "{{ ansible_facts['services'].values() | selectattr('source', 'equalto', 'systemd') }}"
#     existing_systemd_services: "{{ known_systemd_services | rejectattr('status', 'equalto', 'not-found') }}"

- name: Test assert rsync service status
  ansible.builtin.assert:
    that:
      - ansible_facts.services.rsync['state'] == 'running'

- name: Gather facts on listening ports
  community.general.listen_ports_facts:

- name: Test assert TCP port
  ansible.builtin.assert:
    that:
      - 873 in ansible_facts.tcp_listen  | map(attribute='port') | sort | list

# TODO: ModuleNotFoundError: No module named 'psutil'
# - name: Getting process IDs of the process
#   community.general.pids:
#       name: rsync
#   register: pids_of_rsync

# - name: Printing the process IDs obtained
#   ansible.builtin.debug:
#     msg: "PIDS of rsync:{{pids_of_rsync.pids|join(',')}}"
